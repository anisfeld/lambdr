% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lambda-config.R
\name{lambda_config}
\alias{lambda_config}
\title{Set up endpoints, variables, and configuration for AWS Lambda}
\usage{
lambda_config(
  handler = NULL,
  runtime_api = NULL,
  task_root = NULL,
  decode_base64 = TRUE,
  environ = parent.frame()
)
}
\arguments{
\item{handler}{character. Name of function to use for processing inputs from
events. This argument is provided for debugging and testing only. The
"_HANDLER" environment variable, as configured in AWS, will always override
this value if present.}

\item{runtime_api}{character. Used as the host in the various endpoints used
by AWS Lambda. This argument is provided for debugging and testing only.
The "AWS_LAMBDA_RUNTIME_API" environment variable, as configured by AWS,
will always override this value if present.}

\item{task_root}{character. Defines the path to the Lambda function code.
This argument is provided for debugging and testing only. The
"LAMBDA_TASK_ROOT" environment variable, as configured by AWS, will always
override this value if present.}

\item{decode_base64}{logical. Should Base64 input be automatically decoded?
This is only used for events coming via an API Gateway. Complicated input
(such as images) may be better left as is, so that the handler function can
deal with it appropriately. Defaults to \code{TRUE}.}

\item{environ}{environment in which to search for the function given by the
handler. Defaults to the parent frame.}
}
\description{
Set up endpoints, variables, and configuration for AWS Lambda
}
\details{
As a rule of thumb, it takes longer to retrieve a value from an environment
variable than it does to retrieve a value from R. This is because retrieving
an environment variable requires a system call. Since the environment
variables do not change in a Lambda instance, we fetch them once and set them
to a package environment.
}
\section{AWS Lambda variables}{


The \code{\link{lambda_config}} function, which is also run as part of
\code{\link{start_lambda}} configures the R session for Lambda based on
environment variables made available by Lambda. The following environment
variables are available:
\itemize{
\item Lambda Runtime API, available as the "AWS_LAMBDA_RUNTIME_API" environment
variable, is the host of the various HTTP endpoints through which the
runtime interacts with Lambda.
\item Lambda Task Root, available as the "LAMBDA_TASK_ROOT" environment variable,
defines the path to the Lambda function code. It isn't used in container
environments with a custom runtime, as that runtime is responsible for
finding and sourcing the function code.
\item The handler, available as the "_HANDLER" environment variable, is
interpreted by R as the function that is executed when the Lambda is
called. This value could be anything, as the interpretation is solely up
to the runtime, so requiring it to be a function is a standard imposed by
this package.
}
}

\section{Event context}{

The \emph{context} of an event is a list of metadata about the invocation. It is
derived from the headers of a next event invocation response. By default it
consists of:
\itemize{
\item \code{aws_request_id} - The identifier of the invocation request
\item \code{invoked_function_arn} â€“ The Amazon Resource Name (ARN) that's used to
invoke the function. Indicates if the invoker specified a version number or
alias.
}

Alternatively, a particular event \emph{class} (determined by invocation method)
can implement an \code{extract_context} method. This is useful for, say,
invocations coming via API Gateway, in which the context includes details
about the HTTP request. In all cases the context should be a list.

If the handler function accepts a \code{context} argument then it will
automatically receive at runtime a named list consisting of these values
along with the arguments in the body (if any). For example, a function such
as \code{my_func(x, context)} will receive the context argument automatically.
The \code{context} argument must be named (\code{...} will not work).
}

