% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/start-lambda.R
\name{start_lambda}
\alias{start_lambda}
\title{Set-up logging and a Lambda runtime, and start listening for events}
\usage{
start_lambda(
  log_threshold = logger::INFO,
  handler = NULL,
  runtime_api = NULL,
  task_root = NULL,
  environ = parent.frame(),
  deserialiser = NULL,
  serialiser = NULL,
  timeout_seconds = NULL
)
}
\arguments{
\item{log_threshold}{Threshold for recording and displaying log entries.
Defaults to \code{logger::INFO}. To debug a failing Lambda container, set this
to \code{logger::DEBUG} to log verbose information about how each request is
processed.}

\item{handler}{character. Name of function to use for processing inputs from
events. This argument is provided for debugging and testing only. The
"_HANDLER" environment variable, as configured in AWS, will always override
this value if present.}

\item{runtime_api}{character. Used as the host in the various endpoints used
by AWS Lambda. This argument is provided for debugging and testing only.
The "AWS_LAMBDA_RUNTIME_API" environment variable, as configured by AWS,
will always override this value if present.}

\item{task_root}{character. Defines the path to the Lambda function code.
This argument is provided for debugging and testing only. The
"LAMBDA_TASK_ROOT" environment variable, as configured by AWS, will always
override this value if present.}

\item{environ}{environment in which to search for the function given by the
handler.}

\item{deserialiser}{function for deserialising the body of the event.
By default, will attempt to deserialise the body as JSON, based on whether
the input is coming from an API Gateway, scheduled Cloudwatch event, or
direct. To use the body as is, pass the \code{identity} function. If input is
coming via an API Gateway this will require some complicated parsing (see
below).}

\item{serialiser}{function for serialising the result before sending.
By default, will attempt to serialise the body as JSON, based on the
request type. To send the result as is, pass the \code{identity} function.}

\item{timeout_seconds}{If set, the function will stop listening for events
after this timeout. The timeout is checked between events, so this won't
interrupt the function while it is waiting for a new event. This argument
is provided for testing purposes, and shouldn't otherwise need to be set:
AWS should handle the shutdown of idle Lambda instances.}
}
\description{
Runs the following three functions in order:
\itemize{
\item \code{\link{setup_logging}}
\item \code{\link{setup_lambda}}
\item \code{\link{start_listening}}
}

See \code{vignette("lambda-runtime-in-container", package = "lambdr")} for an
example of how to use this function to place an R Lambda Runtime in a
container.
}
\section{AWS Lambda variables}{


The \code{\link{setup_lambda}} function, which is also run as part of
\code{\link{start_lambda}} configures the R session for Lambda based on
environment variables made available by Lambda. The following environment
variables are available:
\itemize{
\item Lambda Runtime API, available as the "AWS_LAMBDA_RUNTIME_API" environment
variable, is the host of the various HTTP endpoints through which the
runtime interacts with Lambda.
\item Lambda Task Root, available as the "LAMBDA_TASK_ROOT" environment variable,
defines the path to the Lambda function code. It isn't used in container
environments with a custom runtime, as that runtime is responsible for
finding and sourcing the function code.
\item The handler, available as the "_HANDLER" environment variable, is
interpreted by R as the function that is executed when the Lambda is
called. This value could be anything, as the interpretation is solely up
to the runtime, so requiring it to be a function is a standard imposed by
this package.
}
}

\section{Event context}{

The \emph{context} of an event is a list of metadata about the invocation. It is
derived from the headers of a next event invocation response. It consists of:
\itemize{
\item \code{aws_request_id} - The identifier of the invocation request
\item \code{invoked_function_arn} â€“ The Amazon Resource Name (ARN) that's used to
invoke the function. Indicates if the invoker specified a version number or
alias.
}

If the handler function accepts a \code{context} argument then it will
automatically receive at runtime a named list consisting of these values
along with the arguments in the body (if any). For example, a function such
as \code{my_func(x, context)} will receive the context argument automatically.
The \code{context} argument must be named (\code{...} will not work).
}

\examples{
\dontrun{
# A general usage pattern involves sourcing necessary functions and running
# this `start_lambda` in a `runtime.R` file which is then executed to start
# the runtime. In the following example, the function handler can be set to
# "lambda" either as the container `CMD`, or configured through AWS Lambda.

parity <- function(number) {
  list(parity = if (as.integer(number) \%\% 2 == 0) "even" else "odd")
}

start_lambda()
}
}
