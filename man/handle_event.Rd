% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/handle-event.R
\name{handle_event}
\alias{handle_event}
\title{Process the input of an event, and submit the result to Lambda}
\usage{
handle_event(event, deserialiser = NULL, serialiser = NULL)
}
\arguments{
\item{event}{the response received from querying the next invocation
endpoint.}

\item{deserialiser}{function for deserialising the body of the event.
By default, will attempt to deserialise the body as JSON, based on whether
the input is coming from an API Gateway, scheduled Cloudwatch event, or
direct. To use the body as is, pass the \code{identity} function. If input is
coming via an API Gateway this will require some complicated parsing (see
below).}

\item{serialiser}{function for serialising the result before sending.
By default, will attempt to serialise the body as JSON, based on the
request type. To send the result as is, pass the \code{identity} function.}
}
\description{
If the handler function accepts a named \code{context} argument then the Lambda
invocation context will be included as an argument. See the section below for
more details.
}
\section{Invocations via an API Gateway}{

Events coming from an API Gateway need to be treated a little differently,
both in parsing the event content and in posting the results. Refer to
\code{vignette("api-gateway-invocations", package = "lambdr")} for details.
}

\section{Event context}{

The \emph{context} of an event is a list of metadata about the invocation. It is
derived from the headers of a next event invocation response. By default it
consists of:
\itemize{
\item \code{aws_request_id} - The identifier of the invocation request
\item \code{invoked_function_arn} â€“ The Amazon Resource Name (ARN) that's used to
invoke the function. Indicates if the invoker specified a version number or
alias.
}

Alternatively, a particular event \emph{class} (determined by invocation method)
can implement an \code{extract_context} method. This is useful for, say,
invocations coming via API Gateway, in which the context includes details
about the HTTP request. In all cases the context should be a list.

If the handler function accepts a \code{context} argument then it will
automatically receive at runtime a named list consisting of these values
along with the arguments in the body (if any). For example, a function such
as \code{my_func(x, context)} will receive the context argument automatically.
The \code{context} argument must be named (\code{...} will not work).
}

\keyword{internal}
